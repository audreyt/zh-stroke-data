// Generated by LiveScript 1.2.0
(function(){
  var rules, AdHocFilter;
  rules = [
    {
      test: {
        comp: function(v){
          return v === '肉';
        },
        whole: function(v){
          return v !== '瘸';
        }
      },
      out: {
        len: function(){
          return '4';
        }
      }
    }, {
      test: {
        comp: function(v){
          return v === '阝';
        }
      },
      out: {
        len: function(){
          return '3';
        }
      }
    }, {
      test: {
        whole: function(v){
          return v === '迴' || v === '遐';
        }
      },
      out: {
        idx: function(){
          return '0';
        }
      }
    }, {
      test: {
        whole: function(v){
          return in$(v, ['育']);
        }
      },
      out: {
        idx: function(){
          return '3';
        }
      }
    }
  ];
  AdHocFilter = function(part){
    var out, i$, ref$, len$, rule, result, k, ref1$, test, change;
    out = {
      part: part.part,
      comp: part.comp,
      whole: part.whole,
      idx: part.idx,
      len: part.len,
      x: part.x,
      y: part.y,
      w: part.w,
      h: part.h
    };
    for (i$ = 0, len$ = (ref$ = rules).length; i$ < len$; ++i$) {
      rule = ref$[i$];
      result = true;
      for (k in ref1$ = rule.test) {
        test = ref1$[k];
        result && (result = test(part[k]));
      }
      if (result) {
        for (k in ref1$ = rule.out) {
          change = ref1$[k];
          out[k] = change(part[k]);
        }
      }
    }
    return out;
  };
  this.TiebreakAdHoc = AdHocFilter;
  if (typeof module != 'undefined' && module !== null) {
    module.exports = AdHocFilter;
  }
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
